{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Naive Bayes classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Classification* is one form of supervised learning. The aim is to annotate all data points with a label. Those points that have the same label belong to the same class. There can be two or more labels. For example, a lifeforms can be classified (coarsely) with labels animal, plant, fungi, archaea, bacteria, protozoa, and chromista. The data points are observed to have certain features that can be used to predict their labels. For example, if it is has feathers, then it is most likely an animal.\n",
    "\n",
    "In supervised learning an algorithm is first given a training set of data points with their features and labels. Then the algorithm learns from these features and labels a (probabilistic) model, which can afterwards be used to predict the labels of previously unseen data.\n",
    "\n",
    "*Naive Bayes classification* is a fast and simple to understand method. Its speed is due to some simplifications we make about the underlying probability distributions, namely, the assumption about the independence of features. Yet, it can be quite powerful, especially when there are enough features in the data.\n",
    "\n",
    "Suppose we have for each label L a probability distribution. This distribution gives probability for each possible combination of features (a feature vector):\n",
    "$$P(features | L).$$\n",
    "The main idea in Bayesian classification is to reverse the direction of dependence: we want to predict the label based on the features:\n",
    "$$P(L | features)$$\n",
    "This is possible by [the Bayes theorem](https://en.wikipedia.org/wiki/Bayes%27_theorem):\n",
    "$$P(L | features) = \\frac{P(features | L)P(L)}{P(features)}.$$\n",
    "\n",
    "Let's assume we have to labels L1 and L2, and their associated distributions: $P(features | L1)$ and $P(features | L2)$. If we have a data point with \"features\", whose label we don't know, we can try to predict it using the ratio of posterior probabilities:\n",
    "$$\\frac{P(L1 | features)}{P(L2 | features)} = \\frac{P(features | L1)P(L1)}{P(features | L2)P(L2)}.$$\n",
    "If the ratio is greater than one, we label our data point with label L1, and if not, we give it label L2.\n",
    "The prior probabilities P(L1) and P(L2) of labels can be easily found out from the input data, as for each data point we also have its label. Same goes for the probabilities of features conditioned on the label."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first demonstrate naive Bayes classification using Gaussian distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import make_blobs\n",
    "X,y = make_blobs(100, 2, centers=2, random_state=2, cluster_std=1.5)\n",
    "colors=np.array([\"red\", \"blue\"])\n",
    "plt.scatter(X[:, 0], X[:, 1], c=colors[y], s=50)\n",
    "for label, c in enumerate(colors):\n",
    "    plt.scatter([], [], c=c, label=str(label))\n",
    "plt.legend();\n",
    "#plt.colorbar();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "model = GaussianNB()\n",
    "#model = MultinomialNB()\n",
    "model.fit(X, y);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naive Bayes algorithm fitted two 2-dimensional Gaussian distribution to the data. The means and the variances define these distributions completely."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Means: [[-1.64939095 -9.36891451]\n",
      " [ 1.29327924 -1.24101221]]\n",
      "Standard deviations: [[2.06097005 2.47716872]\n",
      " [3.33164807 2.22401384]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Means:\", model.theta_)\n",
    "print(\"Standard deviations:\", model.sigma_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot these distributions. First we define a helper function to draw an ellipse that gives the standard deviation in each direction from the origo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_ellipse(ax, mu, sigma, color=\"k\", label=None):\n",
    "    \"\"\"\n",
    "    Based on\n",
    "    http://stackoverflow.com/questions/17952171/not-sure-how-to-fit-data-with-a-gaussian-python.\n",
    "    \"\"\"\n",
    "    from matplotlib.patches import Ellipse\n",
    "    # Compute eigenvalues and associated eigenvectors\n",
    "    vals, vecs = np.linalg.eigh(sigma)\n",
    "\n",
    "    # Compute \"tilt\" of ellipse using first eigenvector\n",
    "    x, y = vecs[:, 0]\n",
    "    theta = np.degrees(np.arctan2(y, x))\n",
    "\n",
    "    # Eigenvalues give length of ellipse along each eigenvector\n",
    "    w, h = 2 * np.sqrt(vals)\n",
    "\n",
    "    ax.tick_params(axis='both', which='major', labelsize=20)\n",
    "    ellipse = Ellipse(mu, w, h, theta, color=color, label=label)  # color=\"k\")\n",
    "    ellipse.set_clip_box(ax.bbox)\n",
    "    ellipse.set_alpha(0.2)\n",
    "    ax.add_artist(ellipse)\n",
    "    return ellipse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.xlim(-5, 5)\n",
    "plt.ylim(-15, 5)\n",
    "plot_ellipse(plt.gca(), model.theta_[0], np.identity(2)*model.sigma_[0], color=\"red\")\n",
    "plot_ellipse(plt.gca(), model.theta_[1], np.identity(2)*model.sigma_[1], color=\"blue\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Accuracy score* gives a measure about how well we managed to predict the labels. The maximum value is 1.0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 1.0\n"
     ]
    }
   ],
   "source": [
    "y_fitted = model.predict(X)\n",
    "acc=accuracy_score(y,y_fitted)\n",
    "print(\"Accuracy score is\", acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The score was the best possible, which is not a surprise, since we tried to predict the data we had already seen!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [],
   "source": [
    "# These densities based on samples don't look good.\n",
    "#data1=np.random.multivariate_normal(model.theta_[0], np.identity(2)*model.sigma_[0], size=1000)\n",
    "#data1 = pd.DataFrame(data1, columns=['x','y'])\n",
    "#sns.kdeplot(data1.x, data1.y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Another example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's generate some more data using multivariate normal distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cov=np.array([[ 4.68, -4.32],\n",
    " [-4.32,  4.68]])\n",
    "mean1 = [0,0]\n",
    "mean2 = [0,4]\n",
    "n=500\n",
    "x1 = np.random.multivariate_normal(mean1, cov, n).T\n",
    "x2 = np.random.multivariate_normal(mean2, cov, n).T\n",
    "#print(type(x1), x1.shape)\n",
    "#print(x1[:5])\n",
    "X=np.vstack([x1.T,x2.T])\n",
    "#print(X[:5])\n",
    "y=np.hstack([[0]*n, [1]*n]).T\n",
    "#y=np.hstack([y1,y2])\n",
    "#plt.hist2d(X[:,0], X[:,1], bins=100, cmap='Blues');\n",
    "#plt.scatter(X[:,0], X[:,1], c=y)\n",
    "plt.scatter(X[:n,0], X[:n,1], color=\"red\", label=0)\n",
    "plt.scatter(X[n:,0], X[n:,1], color=\"blue\", label=1)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two clusters seem to be quite separate. Let's try naive Bayesian classification on this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = GaussianNB()\n",
    "#model = MultinomialNB()\n",
    "model.fit(X, y);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Means: [[-0.12823719  0.14571559]\n",
      " [ 0.01507932  3.9942384 ]]\n",
      "Standard deviations: [[4.52895773 4.35115634]\n",
      " [4.26576426 4.39396456]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Means:\", model.theta_)\n",
    "print(\"Standard deviations:\", model.sigma_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.839\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_fitted = model.predict(X)\n",
    "colors=np.array([\"red\", \"blue\"])\n",
    "plt.scatter(X[:,0], X[:,1], color=colors[y_fitted])\n",
    "plt.scatter([], [], color=\"red\", label=\"0\")\n",
    "plt.scatter([], [], color=\"blue\", label=\"1\")\n",
    "from sklearn.metrics import accuracy_score\n",
    "acc=accuracy_score(y,y_fitted)\n",
    "plt.legend()\n",
    "print(\"Accuracy score is\", acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even thought the score is quite good, we can see from the plot that the algorithm didn't have good models for the data. We can plot the models the algorithm used:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.xlim(-10, 10)\n",
    "plt.ylim(-15, 10)\n",
    "e1=plot_ellipse(plt.gca(), model.theta_[0], np.identity(2)*model.sigma_[0], color=\"red\", label=\"0\")\n",
    "e2=plot_ellipse(plt.gca(), model.theta_[1], np.identity(2)*model.sigma_[1], color=\"blue\", label=\"1\")\n",
    "plt.legend([e1, e2], [\"0\", \"1\"]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The problem with naive Bayesian classification is that it tries to model the data using Gaussian distributions, which are aligned along the x and y axes. With this example data we would have needed Gaussian distributions which are \"tilted\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Text classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We next try to classificate a set of messages that were posted on a public forum. The messages were divided into groups by the topics. So, we have a data set ready for classification testing. Let's first load this data using scikit-learn and print the message categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alt.atheism',\n",
       " 'comp.graphics',\n",
       " 'comp.os.ms-windows.misc',\n",
       " 'comp.sys.ibm.pc.hardware',\n",
       " 'comp.sys.mac.hardware',\n",
       " 'comp.windows.x',\n",
       " 'misc.forsale',\n",
       " 'rec.autos',\n",
       " 'rec.motorcycles',\n",
       " 'rec.sport.baseball',\n",
       " 'rec.sport.hockey',\n",
       " 'sci.crypt',\n",
       " 'sci.electronics',\n",
       " 'sci.med',\n",
       " 'sci.space',\n",
       " 'soc.religion.christian',\n",
       " 'talk.politics.guns',\n",
       " 'talk.politics.mideast',\n",
       " 'talk.politics.misc',\n",
       " 'talk.religion.misc']"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_20newsgroups\n",
    "data = fetch_20newsgroups()\n",
    "data.target_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We concentrate on four message categories only. The tool fetch_20newsgroups allows us to easily split the data into training and testing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "metadata": {},
   "outputs": [],
   "source": [
    "categories = ['comp.graphics', 'rec.autos', 'sci.electronics', 'sci.crypt']\n",
    "train = fetch_20newsgroups(subset='train', categories=categories)\n",
    "test = fetch_20newsgroups(subset='test', categories=categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see what we got:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data: Data: <class 'list'> 2364 Target: <class 'numpy.ndarray'> 2364\n",
      "Test data: Data: <class 'list'> 1574 Target <class 'list'> 1574\n"
     ]
    }
   ],
   "source": [
    "print(\"Training data:\", \"Data:\", str(type(train.data)), len(train.data), \"Target:\", str(type(train.target)), len(train.target))\n",
    "print(\"Test data:\", \"Data:\", str(type(test.data)), len(test.data), \"Target\", str(type(test.data)), len(test.target))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use as features the frequencies of each word in the dataset. That is, there as many features as there are distinct words in the dataset. We denote the number of features by $f$. As the features are now counts, it is sensible to use multinomial distribution instead of Gaussian. \n",
    "\n",
    "Let's try to model these messages using multinomial distributions. Each message category has its own distribution. A multinomial distribution has $f$ non-negative parameters $\\theta_1,\\ldots , \\theta_f$, which sum up to one. For example, the parameter $\\theta_3$ might tell the the probability of the word \"board\" appearing in a message of the category this distribution is describing.\n",
    "\n",
    "In scikit-learn there is a class CountVectorizer that converts messages in form of text strings to feature vectors. We can integrate this conversion with the model we are using (multinomial naive Bayes), so that the conversion happens automatically as part of the fit method. We achive this integration using the make_pipeline tool."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.920584498094028\n"
     ]
    }
   ],
   "source": [
    "#from sklearn.feature_extraction.text import TfidfVectorizer  # an alternative feature extractor\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "#model = make_pipeline(TfidfVectorizer(), MultinomialNB())\n",
    "model = make_pipeline(CountVectorizer(), MultinomialNB())\n",
    "model.fit(train.data, train.target)\n",
    "labels_fitted = model.predict(test.data)\n",
    "print(\"Accuracy score is\", accuracy_score(labels_fitted, test.target))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classifier seem to work quite well! \n",
    "\n",
    "Let's have a closer look at the resulting feature vectors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of feature matrix: <class 'scipy.sparse.csr.csr_matrix'>\n",
      "  (0, 20579)\t1\n",
      "  (0, 19220)\t1\n",
      "  (0, 29697)\t1\n",
      "  (0, 6320)\t1\n",
      "  (0, 25926)\t1\n",
      "  (0, 34222)\t1\n",
      "  (0, 31398)\t1\n",
      "  (0, 17883)\t1\n",
      "  (0, 16809)\t1\n",
      "  (0, 34425)\t1\n",
      "  (0, 23460)\t1\n",
      "  (0, 21787)\t1\n",
      "  (0, 11068)\t1\n",
      "  (0, 29494)\t1\n",
      "  (0, 29505)\t1\n",
      "  (0, 18436)\t1\n",
      "  (0, 24025)\t1\n",
      "  (0, 25336)\t1\n",
      "  (0, 12577)\t1\n",
      "  (0, 27517)\t1\n",
      "  (0, 30641)\t1\n",
      "  (0, 5980)\t1\n",
      "  (0, 29104)\t1\n",
      "  (0, 27521)\t1\n",
      "  (0, 11100)\t1\n",
      "  :\t:\n",
      "  (0, 17310)\t1\n",
      "  (0, 25400)\t1\n",
      "  (0, 23118)\t1\n",
      "  (0, 31686)\t6\n",
      "  (0, 27158)\t1\n",
      "  (0, 18085)\t1\n",
      "  (0, 12580)\t1\n",
      "  (0, 2100)\t1\n",
      "  (0, 20381)\t1\n",
      "  (0, 32729)\t1\n",
      "  (0, 23854)\t2\n",
      "  (0, 11079)\t1\n",
      "  (0, 15109)\t2\n",
      "  (0, 20509)\t1\n",
      "  (0, 23858)\t1\n",
      "  (0, 26624)\t1\n",
      "  (0, 30377)\t1\n",
      "  (0, 16034)\t1\n",
      "  (0, 19099)\t1\n",
      "  (0, 13317)\t6\n",
      "  (0, 34790)\t6\n",
      "  (0, 9553)\t4\n",
      "  (0, 21852)\t5\n",
      "  (0, 18962)\t3\n",
      "  (0, 15373)\t1\n"
     ]
    }
   ],
   "source": [
    "vec=CountVectorizer()\n",
    "features=vec.fit_transform(train.data)\n",
    "print(\"Type of feature matrix:\", type(features))\n",
    "print(features[0,:])        # print the features of the first sample point"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The feature matrix is stored in sparse format, that is, only the nonzero counts are stored. How many words were in the first message?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of words: 177\n",
      "Word 'it' appears in the first message 2 times.\n",
      "\n",
      "From: jgfoot@minerva.cis.yale.edu (Josh A. Goldfoot)\n",
      "Subject: Re: Organized Lobbying for Cryptography\n",
      "Organization: Yale University\n",
      "Lines: 21\n",
      "Distribution: inet\n",
      "Reply-To: jgfoot@minerva.cis.yale.edu\n",
      "NNTP-Posting-Host: minerva.cis.yale.edu\n",
      "X-Newsreader: TIN [version 1.1 Minerva PL9]\n",
      "\n",
      "Shaun P. Hughes (sphughes@sfsuvax1.sfsu.edu) wrote:\n",
      ": In article <1r3jgbINN35i@eli.CS.YALE.EDU> jgfoot@minerva.cis.yale.edu writes:\n",
      "[deletion]\n",
      ": >Perhaps these encryption-only types would defend the digitized porn if it\n",
      ": >was posted encrypted?\n",
      ": >\n",
      ": >These issues are not as seperable as you maintain.\n",
      ": >\n",
      "\n",
      ": Now why would anyone \"post\" anything encrypted? Encryption is only of \n",
      ": use between persons who know how to decrypt the data.\n",
      "\n",
      ": And why should I care what other people look at? \n",
      "\n",
      "I was responding to another person (Tarl Neustaedter) who held that the\n",
      "EFF wasn't the best organization to fight for crytography rights since the\n",
      "EFF also supports the right to distribute pornography over the internet,\n",
      "something some Crypto people might object to. In other words, he's\n",
      "implying that there are people who will protect any speech, just  as long\n",
      "as it is encrypted.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of words:\", features[0,:].sum())\n",
    "col = vec.vocabulary_[\"it\"]   # Get the column of 'it' word in the feature matrix\n",
    "print(\"Word 'it' appears in the first message %i times.\" % features[0, col])\n",
    "print()\n",
    "print(train.data[0])   # Let's print the corresponding message as well\n",
    "#print(vec.get_feature_names())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <div class=\"alert alert-info\">Exercise 5 (blob_classification)</div>\n",
    "\n",
    "Write a function blob_classification that gets feature matrix X and label vector y as parameters. It should then return the accuracy score of the prediction. Do the prediction using GaussianNB, and use train_test_split function from sklearn to split the dataset in to two equal halves: one for training and one for testing. Give parameter random_state=0 to the splitting function so that the result is deterministic. Use training set size of 75% of the whole data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <div class=\"alert alert-info\">Exercise 6 (plant classification)</div>\n",
    "\n",
    "Write function plant_classification that does the following:\n",
    "* loads the iris dataset using sklearn (sklearn.datasets.load_iris)\n",
    "* splits the data into training and testing part using the train_test_split function so that the training set size is 80% of the whole data (give the call also the random_state=0 argument to make the result deterministic)\n",
    "* use Gaussian naive Bayes to fit the training data\n",
    "* predict labels of the test data\n",
    "* the function should return the accuracy score of the prediction performance (sklearn.metrics.accuracy_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <div class=\"alert alert-info\">Exercise 7 (word classification)</div>\n",
    "\n",
    "Part 1.\n",
    "\n",
    "Write function get_features that gets a one dimensional np.array, containing words, as parameter. It should return a feature matrix of shape (n, 29), where n is the number of elements of the input array. There should be one feature for each of the letters in the following alphabet: \"abcdefghijklmnopqrstuvwxyzäö-\".\n",
    "\n",
    "Part 2.\n",
    "\n",
    "Write function contains_valid_chars that takes a string as a parameter and returns the truth value of whether all the characters in the string belong to the alphabet or not.\n",
    "\n",
    "Part 3.\n",
    "\n",
    "Write function get_features_and_labels() that returns the tuple (X, y) of the feature matrix and the target vector. Use the labels 0 and 1 for Finnish and English, respectively. Use the supplied functions load_finnish() and load_english() to get the lists of words. Filter the lists in the following ways:\n",
    "\n",
    "* Convert the Finnish words to lowercase, and then filter out those words that contain characters that don't belong to the alphabet.\n",
    "* For the English words first filter out those words that begin with an uppercase letter to get rid of proper nouns. Then proceed as with the Finnish words.\n",
    "\n",
    "Use get_features function you made earlier to form the feature matrix.\n",
    "\n",
    "Part 4.\n",
    "\n",
    "Create `word_classification` function that does the following:\n",
    "\n",
    "Use the function `get_features_and_labels` you made earlier to get the feature matrix and the labels. Use multinomial naive Bayes to do the classification. Get the accuracy scores using the `sklearn.model_selection.cross_val_score` function; use 5-fold cross validation. The function should return a list of five accuracy scores.\n",
    "\n",
    "The cv parameter of cross_val_score can be either an integer, which specifies the number of folds, or it can be a *cross-validation generator* that generates the (train set,test set) pairs. What happens if you pass the following cross-validation generator to `cross_val_score` as a parameter: `sklearn.model_selection.KFold(n_splits=5, shuffle=True, random_state=0)`.\n",
    "\n",
    "Why the difference?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <div class=\"alert alert-info\">Exercise 8 (spam detection)</div>\n",
    "\n",
    "In the src folder there are two files: ham.txt.gz and spam.txt.gz. The files are preprocessed versions of the files from https://spamassassin.apache.org/old/publiccorpus/. There is one email per line. The file ham.txt.gz contains emails that are non-spam, and, conversely, emails in file spam.txt are spam. The email headers have been removed, except for the subject line, and non-ascii characters have been deleted.\n",
    "\n",
    "Write function spam_detection that does the following:\n",
    "* reads these files. Use function open from gzip module, since the files are compressed.\n",
    "* forms the combined feature matrix using `CountVectorizer` class' `fit_transform` method.\n",
    "* use labels 0 for ham and 1 for spam\n",
    "* divide that feature matrix and the target label into training and test sets, using `train_test_split`\n",
    "* train a MultinomialNB model, and use it to predict the labels for the test set\n",
    "\n",
    "The function should return a triple consisting of\n",
    "* accuracy score of the prediction\n",
    "* size of test sample\n",
    "* number of misclassified sample points\n",
    "\n",
    "Pass the function's random_state parameter to function `train_test_split`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
